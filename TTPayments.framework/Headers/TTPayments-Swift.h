// Generated by Apple Swift version 3.0.1 (swiftlang-800.0.58.6 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
typedef SWIFT_ENUM(NSInteger, AuthMethod) {
  AuthMethodPin = 0,
  AuthMethodPush = 1,
  AuthMethodFingerprint = 2,
};


SWIFT_CLASS("_TtC10TTPayments3DAC")
@interface DAC : NSObject
- (nullable instancetype)initFromString:(NSString * _Nonnull)fromString OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, Scheme) {
  SchemeVisa = 0,
  SchemeMastercard = 1,
  SchemeAmex = 2,
  SchemeJcb = 3,
  SchemeDiscover = 4,
  SchemeMaestro = 5,
  SchemeUnrecognised = 6,
  SchemeAmbiguous = 7,
};

@protocol TTPinEntryDelegate;
@protocol TTPushTokenDataSource;
@protocol TAPCallback;
@class TAPCard;
@class Token;
@class NSError;

SWIFT_CLASS("_TtC10TTPayments3TAP")
@interface TAP : NSObject
@property (nonatomic, strong) id <TTPinEntryDelegate> _Nullable pinDelegate;
@property (nonatomic, strong) id <TTPushTokenDataSource> _Nullable pushTokenDataSource;
+ (TAP * _Nonnull)getInstanceWithApiKey:(NSString * _Nonnull)apiKey;
- (void)checkVersionWithCallback:(id <TAPCallback> _Nonnull)callback;
- (void)requestDacWithCardNumber:(NSString * _Nonnull)cardNumber callback:(id <TAPCallback> _Nonnull)callback;
- (void)registerCard:(TAPCard * _Nonnull)tapCard dac:(DAC * _Nonnull)dac callback:(id <TAPCallback> _Nonnull)callback;
- (void)authenticate:(TAPCard * _Nonnull)tapCard token:(Token * _Nonnull)token callback:(id <TAPCallback> _Nonnull)callback;
- (void)unregisterCard:(TAPCard * _Nonnull)tapCard callback:(id <TAPCallback> _Nonnull)callback;
- (void)decline:(Token * _Nonnull)token callback:(id <TAPCallback> _Nonnull)callback;
- (NSArray<TAPCard *> * _Nonnull)getCards;
- (void)checkForBlockedCardsWithCards:(NSArray<TAPCard *> * _Nonnull)cards onCompletion:(void (^ _Nonnull)(NSArray<TAPCard *> * _Nonnull, NSError * _Nullable))onCompletion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP10TTPayments11TAPCallback_")
@protocol TAPCallback
- (void)onError:(NSError * _Nonnull)error;
- (void)onSuccess;
@end


SWIFT_CLASS("_TtC10TTPayments7TAPCard")
@interface TAPCard : NSObject
- (NSString * _Nonnull)getPanTruncated;
- (NSInteger)getPanLength;
- (NSString * _Nonnull)getToken;
- (NSString * _Nonnull)getBic;
- (NSString * _Nonnull)getExpiry;
- (enum Scheme)getScheme;
- (BOOL)isBlocked;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP10TTPayments18TTPinEntryDelegate_")
@protocol TTPinEntryDelegate
/**
  Returns a boolean value to decide between using TouchID(if available) or pin entry.

  returns:
  Boolean value to decide between TouchID or pin entry
*/
- (BOOL)useTouchId;
/**
  Area to prompt for PIN from user.
  \param processPin callback to pass PIN to once retrieved

*/
- (void)promptForPin:(void (^ _Nonnull)(NSString * _Nonnull))processPin;
@end


SWIFT_PROTOCOL("_TtP10TTPayments21TTPushTokenDataSource_")
@protocol TTPushTokenDataSource
- (NSString * _Nullable)getToken;
@end


SWIFT_CLASS("_TtC10TTPayments5Token")
@interface Token : NSObject
- (nonnull instancetype)initFromString:(NSString * _Nonnull)fromString OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getValueAsString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface UIDevice (SWIFT_EXTENSION(TTPayments))
@end

#pragma clang diagnostic pop
